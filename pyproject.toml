[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dydx-trader"
version = "0.1.0"
description = "dYdX v4 Perpetual Trading Bot - Protocol-First Implementation"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "dYdX Trader", email = "trader@example.com"},
]
keywords = ["dydx", "trading", "perpetuals", "defi", "protocol-first"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Official dYdX v4 Client - MANDATORY
    "dydx-v4-client>=1.0.0",
    
    # Core async and data handling
    "asyncio",
    "aiohttp>=3.8.0",
    "websockets>=11.0",
    
    # Data validation and processing (minimal, protocol-first)
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Numerical and data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    
    # Terminal UI
    "rich>=13.0.0",
    "textual>=0.40.0",
    
    # Configuration and environment
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    
    # Logging and monitoring
    "structlog>=23.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    
    # Performance profiling
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
    
    # Development tools
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
]

[project.urls]
"Homepage" = "https://github.com/steamnoid/dydx-trader"
"Bug Reports" = "https://github.com/steamnoid/dydx-trader/issues"
"Source" = "https://github.com/steamnoid/dydx-trader"

[project.scripts]
dydx-trader = "dydx_bot.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dydx_bot"]
known_third_party = ["dydx_v4_client"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "dydx_v4_client.*",
    "websockets.*",
    "rich.*",
    "textual.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src/dydx_bot --cov-report=term-missing --cov-report=html --cov-fail-under=95"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "slow: Slow tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/dydx_bot"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
